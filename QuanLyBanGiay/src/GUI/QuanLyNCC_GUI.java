/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *//*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import BUS.NhaCungCap_BUS;
import BUS.NhanVien_BUS;
import BUS.SanPham_BUS;
import DTO.NhaCungCap_DTO;
import DTO.NhanVien_DTO;
import DTO.SanPham_DTO;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Administrator
 */
public class QuanLyNCC_GUI extends javax.swing.JPanel {

    /**
     * Creates new form QuanLyNCC_GUI
     */
    public QuanLyNCC_GUI() {
        initComponents();
        
        LoadAllNCCToJTable();
        addTimKiemCBB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbMaNCC = new javax.swing.JLabel();
        txfMaNCC = new javax.swing.JTextField();
        txfTenNCC = new javax.swing.JTextField();
        lbTenNCC = new javax.swing.JLabel();
        txfDiaChiNCC = new javax.swing.JTextField();
        lbDiaChiNCC = new javax.swing.JLabel();
        lbSDTNCC = new javax.swing.JLabel();
        txfSDTNCC = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnKhoa = new javax.swing.JButton();
        btnXoaInput = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNCC = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        lbTimKiem1 = new javax.swing.JLabel();
        txfTimKiem = new javax.swing.JTextField();
        cbbTimKiem = new javax.swing.JComboBox();
        btnExcelExport = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lbQuanLyNhanVien = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setPreferredSize(new java.awt.Dimension(909, 704));

        lbMaNCC.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbMaNCC.setText("Mã nhà cung cấp:");

        txfMaNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfMaNCCKeyPressed(evt);
            }
        });

        txfTenNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfTenNCCKeyPressed(evt);
            }
        });

        lbTenNCC.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbTenNCC.setText("Tên nhà cung cấp:");

        txfDiaChiNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfDiaChiNCCKeyPressed(evt);
            }
        });

        lbDiaChiNCC.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbDiaChiNCC.setText("Địa chỉ nhà cung cấp:");

        lbSDTNCC.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbSDTNCC.setText("SDT nhà cung cấp:");

        txfSDTNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfSDTNCCKeyPressed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-add-27.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setPreferredSize(new java.awt.Dimension(104, 27));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnCapNhat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-update-left-rotation-27.png"))); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });

        btnKhoa.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnKhoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-delete-27.png"))); // NOI18N
        btnKhoa.setText("Xóa");
        btnKhoa.setPreferredSize(new java.awt.Dimension(104, 27));
        btnKhoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKhoaActionPerformed(evt);
            }
        });

        btnXoaInput.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnXoaInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clean-icon3.png"))); // NOI18N
        btnXoaInput.setPreferredSize(new java.awt.Dimension(104, 27));
        btnXoaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaInputActionPerformed(evt);
            }
        });

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Mã NCC", "Mã danh mục", "Tên sản phẩm", "Size", "Số lượng SP", "Miêu tả SP", "Đơn giá SP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.getTableHeader().setReorderingAllowed(false);
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        tblSanPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblSanPhamKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSanPham);
        if (tblSanPham.getColumnModel().getColumnCount() > 0) {
            tblSanPham.getColumnModel().getColumn(0).setResizable(false);
            tblSanPham.getColumnModel().getColumn(1).setResizable(false);
            tblSanPham.getColumnModel().getColumn(2).setResizable(false);
            tblSanPham.getColumnModel().getColumn(3).setResizable(false);
            tblSanPham.getColumnModel().getColumn(4).setResizable(false);
            tblSanPham.getColumnModel().getColumn(5).setResizable(false);
            tblSanPham.getColumnModel().getColumn(6).setResizable(false);
            tblSanPham.getColumnModel().getColumn(7).setResizable(false);
        }

        tblNCC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhà cung cấp", "Tên nhà cung cấp", "Địa chỉ nhà cung cấp", "SDT nhà cung cấp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNCC.getTableHeader().setReorderingAllowed(false);
        tblNCC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNCCMouseClicked(evt);
            }
        });
        tblNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblNCCKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblNCC);
        if (tblNCC.getColumnModel().getColumnCount() > 0) {
            tblNCC.getColumnModel().getColumn(0).setResizable(false);
            tblNCC.getColumnModel().getColumn(1).setResizable(false);
            tblNCC.getColumnModel().getColumn(2).setResizable(false);
            tblNCC.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Sản phẩm của nhà cung cấp");

        lbTimKiem1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbTimKiem1.setText("Tìm kiếm:");

        txfTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTimKiemActionPerformed(evt);
            }
        });
        txfTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfTimKiemKeyReleased(evt);
            }
        });

        cbbTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTimKiemActionPerformed(evt);
            }
        });

        btnExcelExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExcelExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-export-excel-27.png"))); // NOI18N
        btnExcelExport.setText("Xuất Excel");
        btnExcelExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(lbTimKiem1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbbTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExcelExport)
                .addGap(0, 185, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTimKiem1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcelExport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(235, 235, 235))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnXoaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCapNhat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lbSDTNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txfSDTNCC))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbDiaChiNCC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbTenNCC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txfTenNCC)
                                .addComponent(txfDiaChiNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lbMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txfMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTenNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfTenNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDiaChiNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfDiaChiNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfSDTNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSDTNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXoaInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCapNhat)
                        .addComponent(btnKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbQuanLyNhanVien.setBackground(new java.awt.Color(102, 102, 255));
        lbQuanLyNhanVien.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        lbQuanLyNhanVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-truck-26.png"))); // NOI18N
        lbQuanLyNhanVien.setText("QUẢN LÝ NHÀ CUNG CẤP");
        lbQuanLyNhanVien.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbQuanLyNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(348, 348, 348))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1039, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbQuanLyNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txfMaNCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMaNCCKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfTenNCC);
        }
    }//GEN-LAST:event_txfMaNCCKeyPressed

    private void txfTenNCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfTenNCCKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfDiaChiNCC);
        }
        
    }//GEN-LAST:event_txfTenNCCKeyPressed

    private void txfDiaChiNCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfDiaChiNCCKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfSDTNCC);
        }
    }//GEN-LAST:event_txfDiaChiNCCKeyPressed

    private void txfSDTNCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSDTNCCKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn yêu câu!");
        }
    }//GEN-LAST:event_txfSDTNCCKeyPressed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        ThemNCC();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        CapNhatNCC();
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void btnKhoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKhoaActionPerformed
        KhoaNCC();
    }//GEN-LAST:event_btnKhoaActionPerformed

    private void btnXoaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaInputActionPerformed
        XoaInput();
    }//GEN-LAST:event_btnXoaInputActionPerformed

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void tblSanPhamKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSanPhamKeyReleased
        
    }//GEN-LAST:event_tblSanPhamKeyReleased

    private void tblNCCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNCCMouseClicked
        showRowClicked();
    }//GEN-LAST:event_tblNCCMouseClicked

    private void tblNCCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNCCKeyReleased
        showRowClicked();
    }//GEN-LAST:event_tblNCCKeyReleased

    private void txfTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTimKiemActionPerformed

    private void txfTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfTimKiemKeyReleased
    TimKiemNCC();
    }//GEN-LAST:event_txfTimKiemKeyReleased

    private void cbbTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTimKiemActionPerformed
        TimKiemNCC();
    }//GEN-LAST:event_cbbTimKiemActionPerformed

    private void btnExcelExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelExportActionPerformed
        ExportExcel();
    }//GEN-LAST:event_btnExcelExportActionPerformed
    
    private void LoadAllNCCToJTable(){
        ArrayList<NhaCungCap_DTO> nhacungcapArr = new ArrayList<NhaCungCap_DTO>();
        DefaultTableModel modelNCC = (DefaultTableModel)tblNCC.getModel();
        modelNCC.setRowCount(0); //Xóa dữ liệu đang có trong jtable
        
        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();
        
        nhacungcapArr = nhacungcapBUS.getAllNCC();
        
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        for (int i=0; i < nhacungcapArr.size(); i++ ){
                nhacungcapDTO = nhacungcapArr.get(i);
            
                int maNCC = nhacungcapDTO.getMaNCC();
                String tenNCC = nhacungcapDTO.getTenNCC();
                String diaChiNCC = nhacungcapDTO.getDiaChiNCC();
                String sdtNCC = nhacungcapDTO.getSdtNCC();
                int soLuongSPNCC = nhacungcapDTO.getSoLuongSPNCC();
                System.out.println(soLuongSPNCC);
                
                if (nhacungcapDTO.getTrangThaiNCC().equals("Mở")){
                    Object[] row = {maNCC, tenNCC, diaChiNCC, sdtNCC, soLuongSPNCC };
                    modelNCC.addRow(row);
                }

        }
          
    } //Load tất cả nhân viên từ database lên JTable
    
    private void LoadSPTheoNCC(int maNCCDaChon){
        ArrayList<SanPham_DTO> sanphamArr = new ArrayList<SanPham_DTO>();
        DefaultTableModel modelNV = (DefaultTableModel)tblSanPham.getModel();
        modelNV.setRowCount(0); //Xóa dữ liệu đang có trong jtable
        
        SanPham_BUS sanphamBUS = new SanPham_BUS();
        
        sanphamArr = sanphamBUS.getAllSanPham();
        
        SanPham_DTO sanphamDTO = new SanPham_DTO();
        
        for (int i=0; i < sanphamArr.size(); i++ ){
                sanphamDTO = sanphamArr.get(i);
            
                int maSP = sanphamDTO.getMaSP();
                int maNCC = sanphamDTO.getMaNCC();
                int maDM = sanphamDTO.getMaDM();
                String tenSP = sanphamDTO.getTenSP();
                int sizeSP = sanphamDTO.getSizeSP();
                int soLuongSP = sanphamDTO.getSoLuongSP();
                String mieuTaSP = sanphamDTO.getMieuTaSP();
                int donGiaSP = sanphamDTO.getDonGiaSP();
                
                if ( maNCC == maNCCDaChon ){
                    Object[] row = {maSP, maNCC, maDM, tenSP, sizeSP, soLuongSP, mieuTaSP, donGiaSP };
                    modelNV.addRow(row);
                }

        }
          
    }
    
    private void showRowClicked(){
       int viTri = tblNCC.getSelectedRow();
       
       txfMaNCC.setEnabled(false);
       txfMaNCC.setDisabledTextColor(Color.GRAY);
       
        if (viTri != -1){
            txfMaNCC.setText(tblNCC.getValueAt(viTri, 0).toString());   
            txfTenNCC.setText(tblNCC.getValueAt(viTri, 1).toString());
            txfDiaChiNCC.setText(tblNCC.getValueAt(viTri, 2).toString());
            txfSDTNCC.setText(tblNCC.getValueAt(viTri, 3).toString());
        }
        
        int maNCCDaChon = Integer.parseInt(tblNCC.getValueAt(viTri, 0).toString());
        LoadSPTheoNCC(maNCCDaChon);   

    } //Show thông tin được click lên Input
    
    private void focusInput(JTextField nameTextField){
        nameTextField.requestFocus();
    }
    
    private void ThemNCC(){
        ArrayList<NhaCungCap_DTO> nhacungcapArr = new ArrayList<NhaCungCap_DTO>();
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        int getMaNCC;
        
        if (txfMaNCC.getDisabledTextColor() != Color.GRAY){
            
            if (txfMaNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã nhà cung cấp!");
                txfMaNCC.requestFocus();
            }
            else if (txfTenNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên nhà cung cấp!");
                txfTenNCC.requestFocus();
            }
            else if (txfDiaChiNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập địa chỉ nhà cung cấp!");
                txfDiaChiNCC.requestFocus();
            }
            else if (txfSDTNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số điện thoại!");
                txfSDTNCC.requestFocus();
            }else{

                try{
                    getMaNCC = Integer.parseInt(txfMaNCC.getText());
                }catch(NumberFormatException e){ //Kiểm tra có phải số nguyên hay không
                    JOptionPane.showMessageDialog(null, "Mã nhà cung cấp phải là số nguyên!");
                    txfMaNCC.requestFocus();
                }
                        getMaNCC = Integer.parseInt(txfMaNCC.getText());
                        nhacungcapDTO.setMaNCC(getMaNCC);
                        nhacungcapDTO.setTenNCC(txfTenNCC.getText());
                        nhacungcapDTO.setDiaChiNCC(txfDiaChiNCC.getText());
                        nhacungcapDTO.setSdtNCC(txfSDTNCC.getText());
                            
                        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();

                        try {
                            int result = nhacungcapBUS.ThemNCC(nhacungcapDTO);

                            if (result != 0) {
                                JOptionPane.showMessageDialog(null,"Thêm nhà cung cấp thành công!");
                                XoaInput();
                            }else {
                                System.out.println("Thêm nhà cung cấp thất bại!");
                                JOptionPane.showMessageDialog(null,"Thêm nhà cung cấp thất bại! \n Mã nhà cung cấp đã tồn tại!"); //Chưa ràng buộc tên tài khoản
                                txfMaNCC.requestFocus();
                            }
                            LoadAllNCCToJTable();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                }
        }else JOptionPane.showMessageDialog(null, "Vui lòng nhấn Clean trước khi thêm!");
            
    }
    
    private void XoaInput(){
    
        txfMaNCC.setEnabled(true);
        txfMaNCC.setDisabledTextColor(Color.WHITE);
        
        if (txfMaNCC.getText().isEmpty() == false){
            txfMaNCC.setText("");
        }
        
        if (txfTenNCC.getText().isEmpty() == false){
            txfTenNCC.setText("");  
        }
        if (txfDiaChiNCC.getText().isEmpty() == false){
            txfDiaChiNCC.setText("");  
        }
        if (txfSDTNCC.getText().isEmpty() == false){
            txfSDTNCC.setText("");  
        }

    } //Dùng cho clean button
    
    private void KhoaNCC(){
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        if (tblNCC.getSelectedRow() != -1  && txfMaNCC.getText().isEmpty() == false){
            nhacungcapDTO.setMaNCC(Integer.parseInt(txfMaNCC.getText()));

            NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();

            int luaChon = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa không?", "Xác nhận", JOptionPane.YES_NO_OPTION );
            if (luaChon == JOptionPane.YES_OPTION){
               try{
               int result = nhacungcapBUS.KhoaNCC(nhacungcapDTO);

               if (result != 0) {
                    JOptionPane.showMessageDialog(null,"Xóa thành công!");
                    XoaInput();
               }else {
                    JOptionPane.showMessageDialog(null,"Xóa thất bại!"); 
               }

                LoadAllNCCToJTable();

               } catch (Exception ex) {
                    ex.printStackTrace();
               }

            }
        }else JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn xóa!");
        
    }
    
    private void CapNhatNCC(){
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        System.out.println(tblNCC.getSelectedRow());//Test
        
        if (tblNCC.getSelectedRow() == -1 || txfMaNCC.getText().equals("")){
               JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn sửa!");
        }
        else if (txfTenNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên nhà cung cấp!");
                txfTenNCC.requestFocus();
        }
        else if (txfDiaChiNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập địa chỉ nhà cung cấp!");
                txfDiaChiNCC.requestFocus();
        }
        else if (txfSDTNCC.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập SDT!");
                txfSDTNCC.requestFocus();
        }else{
            nhacungcapDTO.setMaNCC(Integer.parseInt(txfMaNCC.getText()));
            nhacungcapDTO.setTenNCC(txfTenNCC.getText());
            nhacungcapDTO.setDiaChiNCC(txfDiaChiNCC.getText());
            nhacungcapDTO.setSdtNCC(txfSDTNCC.getText());

            NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();

            try{
               int result = nhacungcapBUS.CapNhatNCC(nhacungcapDTO);

               if (result != 0) {
                    JOptionPane.showMessageDialog(null,"Cập nhật thành công!");        
               }else {
                    JOptionPane.showMessageDialog(null,"Cập nhật thất bại!"); 
               }

                LoadAllNCCToJTable();

               } catch (Exception ex) {
                    ex.printStackTrace();
               }
     
        }
   }
    
    private void addTimKiemCBB(){
        cbbTimKiem.addItem("Tên nhà cung cấp");
        cbbTimKiem.addItem("Mã nhà cung cấp");
        cbbTimKiem.addItem("Địa chỉ NCC");
        cbbTimKiem.addItem("SDT NCC");
    }
    
    private void TimKiemNCC(){
        String optionTimKiem= (String) cbbTimKiem.getSelectedItem();
        System.out.println("Đã chọn: "+ optionTimKiem);//Test
        
        switch (optionTimKiem){
           case "Tên nhà cung cấp": {               
                TimKiemTheoTenNCC();           
                break;
           }
           case "Mã nhà cung cấp": {               
                TimKiemTheoMaNCC();           
                break;
           }
           case "Địa chỉ NCC": {               
                TimKiemTheoDiaChiNCC();           
                break;
           }
           case "SDT NCC": {               
                TimKiemTheoSDTNCC();           
                break;
           }    
       }
    }
    
    private void TimKiemTheoTenNCC(){
        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();
        
        ArrayList<NhaCungCap_DTO> nhacungcapArr = nhacungcapBUS.timKiemTheoTenNCC(txfTimKiem.getText());
        DefaultTableModel modelNV = (DefaultTableModel)tblNCC.getModel();
        modelNV.setRowCount(0);
        
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        for (int i=0; i < nhacungcapArr.size(); i++ ){
                nhacungcapDTO = nhacungcapArr.get(i);
            
                int maNCC = nhacungcapDTO.getMaNCC();
                String tenNCC = nhacungcapDTO.getTenNCC();
                String diaChiNCC = nhacungcapDTO.getDiaChiNCC();
                String sdtNCC = nhacungcapDTO.getSdtNCC();
                
                if (nhacungcapDTO.getTrangThaiNCC().equals("Mở")){
                    Object[] row = {maNCC, tenNCC, diaChiNCC, sdtNCC};
                    modelNV.addRow(row);
                }
        } 
    }
    
    private void TimKiemTheoMaNCC(){
        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();
        
        ArrayList<NhaCungCap_DTO> nhacungcapArr = nhacungcapBUS.timKiemTheoMaNCC(txfTimKiem.getText());
        DefaultTableModel modelNV = (DefaultTableModel)tblNCC.getModel();
        modelNV.setRowCount(0);
        
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        for (int i=0; i < nhacungcapArr.size(); i++ ){
                nhacungcapDTO = nhacungcapArr.get(i);
            
                int maNCC = nhacungcapDTO.getMaNCC();
                String tenNCC = nhacungcapDTO.getTenNCC();
                String diaChiNCC = nhacungcapDTO.getDiaChiNCC();
                String sdtNCC = nhacungcapDTO.getSdtNCC();
                
                if (nhacungcapDTO.getTrangThaiNCC().equals("Mở")){
                    Object[] row = {maNCC, tenNCC, diaChiNCC, sdtNCC};
                    modelNV.addRow(row);
                }
        } 
    }
    
    private void TimKiemTheoDiaChiNCC(){
        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();
        
        ArrayList<NhaCungCap_DTO> nhacungcapArr = nhacungcapBUS.timKiemTheoDiaChiNCC(txfTimKiem.getText());
        DefaultTableModel modelNV = (DefaultTableModel)tblNCC.getModel();
        modelNV.setRowCount(0);
        
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        for (int i=0; i < nhacungcapArr.size(); i++ ){
                nhacungcapDTO = nhacungcapArr.get(i);
            
                int maNCC = nhacungcapDTO.getMaNCC();
                String tenNCC = nhacungcapDTO.getTenNCC();
                String diaChiNCC = nhacungcapDTO.getDiaChiNCC();
                String sdtNCC = nhacungcapDTO.getSdtNCC();
                
                if (nhacungcapDTO.getTrangThaiNCC().equals("Mở")){
                    Object[] row = {maNCC, tenNCC, diaChiNCC, sdtNCC};
                    modelNV.addRow(row);
                }
        } 
    }
    
    private void TimKiemTheoSDTNCC(){
        NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS();
        
        ArrayList<NhaCungCap_DTO> nhacungcapArr = nhacungcapBUS.timKiemTheoSDTNCC(txfTimKiem.getText());
        DefaultTableModel modelNV = (DefaultTableModel)tblNCC.getModel();
        modelNV.setRowCount(0);
        
        NhaCungCap_DTO nhacungcapDTO = new NhaCungCap_DTO();
        
        for (int i=0; i < nhacungcapArr.size(); i++ ){
                nhacungcapDTO = nhacungcapArr.get(i);
            
                int maNCC = nhacungcapDTO.getMaNCC();
                String tenNCC = nhacungcapDTO.getTenNCC();
                String diaChiNCC = nhacungcapDTO.getDiaChiNCC();
                String sdtNCC = nhacungcapDTO.getSdtNCC();
                
                if (nhacungcapDTO.getTrangThaiNCC().equals("Mở")){
                    Object[] row = {maNCC, tenNCC, diaChiNCC, sdtNCC};
                    modelNV.addRow(row);
                }
        } 
    }
    private void ExportExcel(){
        JFileChooser file = new JFileChooser(); //Khởi tạo JFileChooser
        file.setCurrentDirectory(new File(System.getProperty("user.home"))); 
        
        int result = file.showSaveDialog(null);
        if ( result == JFileChooser.APPROVE_OPTION){
            XSSFWorkbook excelWorkbook = new XSSFWorkbook();
            XSSFSheet excelSheet = excelWorkbook.createSheet("Danh sách nhà cung cấp");
            
            XSSFRow row = null;
            Cell cell = null;
            
            row = excelSheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH NHÀ CUNG CẤP   ");

            row = excelSheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Mã nhà cung cấp");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Tên nhà cung cấp");
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Địa chỉ nhà cung cấp");
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Số điện thoại nhà cung cấp");
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Số lượng sản phẩm NCC");
            
            for (int i = 0; i < tblNCC.getRowCount(); i++){
                row = excelSheet.createRow((short) 4 + i);
                row.setHeight((short) 400);
                for (int j = 0; j < tblNCC.getColumnCount(); j++){
                    row.createCell(j).setCellValue(tblNCC.getValueAt(i, j).toString());
                }
            }
            
            FileOutputStream excelFOS;
            BufferedOutputStream excelBOS;
            try{
                excelFOS = new FileOutputStream(new File(file.getSelectedFile() + ".xls"));
                excelBOS = new BufferedOutputStream(excelFOS);
                excelWorkbook.write(excelBOS);
                JOptionPane.showMessageDialog(null, "Xuất file excel thành công!");
                excelBOS.close();
                excelWorkbook.close();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnExcelExport;
    private javax.swing.JButton btnKhoa;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoaInput;
    private javax.swing.JComboBox cbbTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbDiaChiNCC;
    private javax.swing.JLabel lbMaNCC;
    private javax.swing.JLabel lbQuanLyNhanVien;
    private javax.swing.JLabel lbSDTNCC;
    private javax.swing.JLabel lbTenNCC;
    private javax.swing.JLabel lbTimKiem1;
    private javax.swing.JTable tblNCC;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txfDiaChiNCC;
    private javax.swing.JTextField txfMaNCC;
    private javax.swing.JTextField txfSDTNCC;
    private javax.swing.JTextField txfTenNCC;
    private javax.swing.JTextField txfTimKiem;
    // End of variables declaration//GEN-END:variables
}
