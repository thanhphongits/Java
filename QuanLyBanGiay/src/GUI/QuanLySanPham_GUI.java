/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BUS.CongCu;
import BUS.DanhMuc_BUS;
import BUS.NhaCungCap_BUS;
import BUS.NhanVien_BUS;
import BUS.SanPham_BUS;
import DAO.SanPham_DAO;
import DTO.DanhMuc_DTO;
import DTO.NhaCungCap_DTO;
import DTO.SanPham_DTO;
import java.awt.Color;
import java.awt.Image;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Administrator
 */
public class QuanLySanPham_GUI extends javax.swing.JPanel {

    /**
     * Creates new form QuanLySanPham_GUI
     */
    public static String ImgPath = null;

    SanPham_BUS SP_BUS = new SanPham_BUS();

    public QuanLySanPham_GUI() {
        initComponents();
        
        LoadAllSanPhamToJTable();
        SP_BUS.getAllNCC(cbxNhaCC);
        SP_BUS.getAllDanhMucSP(cbxDanhMuc);
        addTimKiemCBB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbMaSanPham = new javax.swing.JLabel();
        txfMaSanPham = new javax.swing.JTextField();
        lblLoaiSanPham = new javax.swing.JLabel();
        txfMaDanhMuc = new javax.swing.JTextField();
        lblTenSanPham = new javax.swing.JLabel();
        txfTenSanPham = new javax.swing.JTextField();
        lblSoLuong = new javax.swing.JLabel();
        lblMieuTaSanPham = new javax.swing.JLabel();
        txfDonGia = new javax.swing.JTextField();
        lblDonGia = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txfMieuTaSanPham = new javax.swing.JTextArea();
        lblImageSP = new javax.swing.JLabel();
        lblAnhSanPham = new javax.swing.JLabel();
        btnXoa = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        btnXoaInput = new javax.swing.JButton();
        cbxNhaCC = new javax.swing.JComboBox<>();
        txfMaNhaCungCap = new javax.swing.JTextField();
        lblLoaiSanPham1 = new javax.swing.JLabel();
        cbxDanhMuc = new javax.swing.JComboBox<>();
        btnChonAnh = new javax.swing.JButton();
        lbTimKiem = new javax.swing.JLabel();
        txfTimKiem = new javax.swing.JTextField();
        cbbTimKiem = new javax.swing.JComboBox();
        btnExcelExport = new javax.swing.JButton();
        lbLocTheoMa = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txfMa1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfMa2 = new javax.swing.JTextField();
        cbbSizeSP = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setBackground(new java.awt.Color(51, 204, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-product-26.png"))); // NOI18N
        jLabel1.setText("QUẢN LÝ SẢN PHẨM");
        jLabel1.setToolTipText("");

        jPanel1.setPreferredSize(new java.awt.Dimension(909, 714));

        lbMaSanPham.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbMaSanPham.setText("Mã sản phẩm:");

        txfMaSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfMaSanPhamActionPerformed(evt);
            }
        });

        lblLoaiSanPham.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblLoaiSanPham.setText("Mã nhà cung cấp:");

        txfMaDanhMuc.setEnabled(false);
        txfMaDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfMaDanhMucActionPerformed(evt);
            }
        });

        lblTenSanPham.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblTenSanPham.setText("Tên sản phẩm:");

        lblSoLuong.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblSoLuong.setText("Size sản phẩm:");

        lblMieuTaSanPham.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblMieuTaSanPham.setText("Miêu tả sản phẩm:");

        txfDonGia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfDonGiaActionPerformed(evt);
            }
        });

        lblDonGia.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblDonGia.setText("Đơn giá:");

        txfMieuTaSanPham.setColumns(20);
        txfMieuTaSanPham.setRows(5);
        jScrollPane2.setViewportView(txfMieuTaSanPham);

        lblImageSP.setBackground(new java.awt.Color(153, 255, 255));
        lblImageSP.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblImageSP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImageSP.setText("Hình ảnh ở đây");

        lblAnhSanPham.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblAnhSanPham.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnhSanPham.setText("Ảnh sản phẩm:");

        btnXoa.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-delete-27.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setPreferredSize(new java.awt.Dimension(104, 27));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnCapNhat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-update-left-rotation-27.png"))); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-add-27.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setPreferredSize(new java.awt.Dimension(104, 27));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Mã nhà cung cấp", "Mã danh mục", "Tên sản phẩm", "Size sản phẩm", "Số lượng", "Miêu tả", "Đơn giá", "Ảnh sản phẩm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        tblSanPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblSanPhamKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSanPham);
        if (tblSanPham.getColumnModel().getColumnCount() > 0) {
            tblSanPham.getColumnModel().getColumn(0).setResizable(false);
            tblSanPham.getColumnModel().getColumn(1).setResizable(false);
            tblSanPham.getColumnModel().getColumn(2).setResizable(false);
            tblSanPham.getColumnModel().getColumn(3).setResizable(false);
            tblSanPham.getColumnModel().getColumn(4).setResizable(false);
            tblSanPham.getColumnModel().getColumn(5).setResizable(false);
            tblSanPham.getColumnModel().getColumn(6).setResizable(false);
            tblSanPham.getColumnModel().getColumn(7).setResizable(false);
            tblSanPham.getColumnModel().getColumn(8).setResizable(false);
        }

        btnXoaInput.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnXoaInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clean-icon3.png"))); // NOI18N
        btnXoaInput.setPreferredSize(new java.awt.Dimension(104, 27));
        btnXoaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaInputActionPerformed(evt);
            }
        });

        cbxNhaCC.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbxNhaCC.setMaximumRowCount(10);
        cbxNhaCC.setToolTipText("");
        cbxNhaCC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxNhaCCMouseClicked(evt);
            }
        });
        cbxNhaCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNhaCCActionPerformed(evt);
            }
        });

        txfMaNhaCungCap.setEnabled(false);

        lblLoaiSanPham1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblLoaiSanPham1.setText("Mã danh mục:");

        cbxDanhMuc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbxDanhMuc.setMaximumRowCount(10);
        cbxDanhMuc.setToolTipText("");
        cbxDanhMuc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxDanhMucMouseClicked(evt);
            }
        });
        cbxDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDanhMucActionPerformed(evt);
            }
        });

        btnChonAnh.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnChonAnh.setText("Chọn ảnh");
        btnChonAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonAnhActionPerformed(evt);
            }
        });

        lbTimKiem.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbTimKiem.setText("Tìm kiếm:");

        txfTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTimKiemActionPerformed(evt);
            }
        });
        txfTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfTimKiemKeyReleased(evt);
            }
        });

        cbbTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTimKiemActionPerformed(evt);
            }
        });
        cbbTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbbTimKiemKeyReleased(evt);
            }
        });

        btnExcelExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExcelExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-export-excel-27.png"))); // NOI18N
        btnExcelExport.setText("Xuất Excel");
        btnExcelExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelExportActionPerformed(evt);
            }
        });

        lbLocTheoMa.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbLocTheoMa.setText("Lọc theo mã:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Từ");

        txfMa1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfMa1KeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Tới");

        txfMa2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfMa2KeyReleased(evt);
            }
        });

        cbbSizeSP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbSizeSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lblLoaiSanPham1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbMaSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblLoaiSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(cbxNhaCC, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txfMaNhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txfMaSanPham)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(cbxDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txfMaDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lblMieuTaSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lblSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblTenSanPham, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txfTenSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txfDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbbSizeSP, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnXoaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnChonAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnCapNhat)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(lblImageSP, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(164, 164, 164)
                                        .addComponent(lblAnhSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbLocTheoMa)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txfMa1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txfMa2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbTimKiem)
                                        .addGap(31, 31, 31)
                                        .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbbTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(101, 101, 101)
                                        .addComponent(btnExcelExport)))))
                        .addGap(0, 58, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnXoaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbMaSanPham, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfMaSanPham, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLoaiSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbxNhaCC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txfMaNhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLoaiSanPham1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfMaDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbSizeSP, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txfTenSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTenSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMieuTaSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txfDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblAnhSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblImageSP, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChonAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbTimKiem)
                        .addComponent(cbbTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnExcelExport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfMa2)
                    .addComponent(txfMa1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(lbLocTheoMa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(387, 387, 387))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        // TODO add your handling code here:
        CapNhatSP();
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        ThemSP();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaInputActionPerformed
        XoaInput();
    }//GEN-LAST:event_btnXoaInputActionPerformed

    private void cbxNhaCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNhaCCActionPerformed
        // TODO add your handling code here:
        showTenNCC();

        // Code ở đây
    }//GEN-LAST:event_cbxNhaCCActionPerformed

    private void txfMaSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfMaSanPhamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfMaSanPhamActionPerformed

    private void txfMaDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfMaDanhMucActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfMaDanhMucActionPerformed

    private void cbxDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDanhMucActionPerformed
        // TODO add your handling code here:
        showTenDM();
    }//GEN-LAST:event_cbxDanhMucActionPerformed

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        // TODO add your handling code here:
        showRowClicked();
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void cbxNhaCCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxNhaCCMouseClicked
        // TODO add your handling code here:
        showTenNCC();
    }//GEN-LAST:event_cbxNhaCCMouseClicked

    private void cbxDanhMucMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxDanhMucMouseClicked
        // TODO add your handling code here:
        showTenDM();
    }//GEN-LAST:event_cbxDanhMucMouseClicked

    private void btnChonAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonAnhActionPerformed
        btnChonAnh();
    }//GEN-LAST:event_btnChonAnhActionPerformed

    private void txfTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfTimKiemKeyReleased
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaSP();
        }
    }//GEN-LAST:event_txfTimKiemKeyReleased

    private void cbbTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTimKiemActionPerformed
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaSP();
        }
    }//GEN-LAST:event_cbbTimKiemActionPerformed

    private void tblSanPhamKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSanPhamKeyReleased
        // TODO add your handling code here:
        showRowClicked();
    }//GEN-LAST:event_tblSanPhamKeyReleased

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        KhoaSP();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void txfDonGiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfDonGiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfDonGiaActionPerformed

    private void btnExcelExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelExportActionPerformed
        ExportExcel();
    }//GEN-LAST:event_btnExcelExportActionPerformed

    private void txfMa1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMa1KeyReleased
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemSP();
        }

        if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }

        if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
           locTheoMaSP();
        }

        if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaSP();
        }

    }//GEN-LAST:event_txfMa1KeyReleased

    private void txfMa2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMa2KeyReleased
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemSP();
        }

        if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }

        if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }

        if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaSP();
        }

    }//GEN-LAST:event_txfMa2KeyReleased

    private void cbbTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbbTimKiemKeyReleased
        // TODO add your handling code here:
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaSP();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaSP();
        }
    }//GEN-LAST:event_cbbTimKiemKeyReleased

    private void txfTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTimKiemActionPerformed

    private void LoadAllSanPhamToJTable() {
        ArrayList<SanPham_DTO> sanphamArr = new ArrayList<SanPham_DTO>();
        DefaultTableModel modelSP = (DefaultTableModel) tblSanPham.getModel();
        modelSP.setRowCount(0); //Xóa dữ liệu đang có trong jtable

        SanPham_BUS SP_BUS = new SanPham_BUS();

        sanphamArr = SP_BUS.getAllSanPham();

        SanPham_DTO SP_DTO = new SanPham_DTO();

        for (int i = 0; i < sanphamArr.size(); i++) {
            SP_DTO = sanphamArr.get(i);

            int maSP = SP_DTO.getMaSP();
            int maNCC = SP_DTO.getMaNCC();
            int maDanhMuc = SP_DTO.getMaDM();
            String tenSP = SP_DTO.getTenSP();
            int sizeSP = SP_DTO.getSizeSP();
            int soLuongSP = SP_DTO.getSoLuongSP();
            String mieuTaSP = SP_DTO.getMieuTaSP();
            int donGia = SP_DTO.getDonGiaSP();
            String donGiaStr = String.format("%,d", donGia);
            byte[] anhSP = SP_DTO.getAnhSP();

            if (SP_DTO.getTrangThaiSP().equals("Mở")) {
                Object[] row = {maSP, maNCC, maDanhMuc, tenSP, sizeSP, soLuongSP, mieuTaSP, donGiaStr, anhSP};
                modelSP.addRow(row);
            }

        }

    } //Load tất cả nhân viên từ database lên JTable

    private void showRowClicked() {
        int viTri = tblSanPham.getSelectedRow();
        txfMaSanPham.setEnabled(false);
        txfMaSanPham.setDisabledTextColor(Color.GRAY);
        System.out.println(viTri);
        if (viTri != -1) {
            txfMaSanPham.setText(tblSanPham.getValueAt(viTri, 0).toString());
            cbxNhaCC.setSelectedItem(tblSanPham.getValueAt(viTri, 1).toString());
            cbxDanhMuc.setSelectedItem(tblSanPham.getValueAt(viTri, 2).toString());
            txfTenSanPham.setText(tblSanPham.getValueAt(viTri, 3).toString());
            cbbSizeSP.setSelectedItem(tblSanPham.getValueAt(viTri, 4).toString());
//            txfSoLuongSanPham.setText(tblSanPham.getValueAt(viTri, 5).toString());
            txfMieuTaSanPham.setText(tblSanPham.getValueAt(viTri, 6).toString());
            
            String donGiaStr = tblSanPham.getValueAt(viTri, 7).toString();
            int donGia = CongCu.FormatTienStringSangInt(donGiaStr);
            txfDonGia.setText(Integer.toString(donGia));

            lblImageSP.setIcon(this.showImageToJLabel(null, (byte[]) tblSanPham.getValueAt(viTri, 8)));
        }
//       }
    } //Show thông tin nhân viên được click lên Input

    private ImageIcon showImageToJLabel(String ImgPath, byte[] anhNV) {
        ImageIcon myImg = null;

        if (ImgPath != null) {
            myImg = new ImageIcon(ImgPath); //Gán đường dẫn mới (ImgPath) nếu chưa có đường dẫn
        } else {
            myImg = new ImageIcon(anhNV); //Lấy ảnh row được click
        }

        Image img = myImg.getImage();
        Image img2 = img.getScaledInstance(lblImageSP.getWidth(), lblImageSP.getHeight(), Image.SCALE_SMOOTH); //Gắn ảnh vào lblNhanVienImage

        ImageIcon image = new ImageIcon(img2);
        return image;
    } //Show hình ảnh lên JLabel

    private void showTenNCC() {
       ArrayList<NhaCungCap_DTO> nccArr = new ArrayList<NhaCungCap_DTO>();
       NhaCungCap_BUS nhacungcapBUS = new NhaCungCap_BUS(); 
       nccArr = nhacungcapBUS.getAllNCC();
       
       int cbbMaNCC = Integer.parseInt(cbxNhaCC.getSelectedItem().toString());
       
       NhaCungCap_DTO nccDTO = new NhaCungCap_DTO();
       
       for (int i = 0; i < nccArr.size();i++){
           nccDTO = nccArr.get(i);
      
           if (cbbMaNCC == nccDTO.getMaNCC()){
                txfMaNhaCungCap.setText(nccDTO.getTenNCC());
           }
           
       }
    }

    private void showTenDM() {
       ArrayList<DanhMuc_DTO> danhmucArr = new ArrayList<DanhMuc_DTO>();
       DanhMuc_BUS danhmucBUS = new DanhMuc_BUS(); 
       danhmucArr = danhmucBUS.getAllDanhMuc();
       
       int cbbMaDM = Integer.parseInt(cbxDanhMuc.getSelectedItem().toString());
       
       DanhMuc_DTO dmDTO = new DanhMuc_DTO();
       
       for (int i = 0; i < danhmucArr.size();i++){
           dmDTO = danhmucArr.get(i);
      
           if (cbbMaDM == dmDTO.getMaDM()){
                txfMaDanhMuc.setText(dmDTO.getTenDM());
           }
           
       }

    }//Dùng cho combobox chức vụ

    private void XoaInput() {

        txfMaSanPham.setEnabled(true);
        txfMaSanPham.setDisabledTextColor(Color.WHITE);

        if (txfMaSanPham.getText().isEmpty() == false) {
            txfMaSanPham.setText("");
        }
        cbxNhaCC.setSelectedItem("1");
        cbxDanhMuc.setSelectedItem("1");

        if (txfTenSanPham.getText().isEmpty() == false) {
            txfTenSanPham.setText("");
        }
        cbxDanhMuc.setSelectedItem("36");
        
        if (txfMieuTaSanPham.getText().isEmpty() == false) {
            txfMieuTaSanPham.setText("");
        }
        if (txfDonGia.getText().isEmpty() == false) {
            txfDonGia.setText("");
        }
        //Clear đường dẫn ảnh và ảnh trên label
        if (ImgPath != null) {
            ImgPath = null;
        }

        lblImageSP.setText("Hình ảnh ở đây!");
        lblImageSP.setIcon(null);
        lblImageSP.setBackground(new Color(204, 255, 204));

    } //Dùng cho clean button

    private void focusInput(JTextField nameTextField) {
        nameTextField.requestFocus();
    } // Focus input

    private void ThemSP() {
        ArrayList<SanPham_DTO> SPArr = new ArrayList<SanPham_DTO>();
        SanPham_DTO SP_DTO = new SanPham_DTO();
        int maSP;

        if (txfMaSanPham.getDisabledTextColor() != Color.GRAY) {

            if (txfMaSanPham.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã sản phẩm!");
                txfMaSanPham.requestFocus();
            } else if (txfTenSanPham.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên sản phẩm!");
                txfTenSanPham.requestFocus();
            } else if (txfMieuTaSanPham.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập miêu tả sản phẩm!");
                txfMieuTaSanPham.requestFocus();
            } else if (txfDonGia.getText().isEmpty() == true) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập giá của sản phẩm!");
                txfDonGia.requestFocus();
            } else if (ImgPath == null) {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn ảnh!");
                btnChonAnh.requestFocus();
            } else {

                try {
                    maSP = Integer.parseInt(txfMaSanPham.getText());
                } catch (NumberFormatException e) { //Kiểm tra có phải số nguyên hay không
                    JOptionPane.showMessageDialog(null, "Mã nhân viên phải là số nguyên!");
                    txfMaSanPham.requestFocus();
                }
                maSP = Integer.parseInt(txfMaSanPham.getText());
                SP_DTO.setMaSP(maSP);
                int cbxmaNCC = Integer.parseInt((String) cbxNhaCC.getSelectedItem());
                SP_DTO.setMaNCC(cbxmaNCC);
                int cbxmaDM = Integer.parseInt((String) cbxDanhMuc.getSelectedItem());
                SP_DTO.setMaDM(cbxmaDM);
                SP_DTO.setTenSP(txfTenSanPham.getText());
                int cbxSizeSP = Integer.parseInt((String) cbbSizeSP.getSelectedItem());
                SP_DTO.setSizeSP(cbxSizeSP);
            
                SP_DTO.setMieuTaSP(txfMieuTaSanPham.getText());
                SP_DTO.setDonGiaSP(Integer.parseInt(txfDonGia.getText()));

                SanPham_BUS SP_BUS = new SanPham_BUS();

                try {
                    int result = SP_BUS.ThemSanPham(SP_DTO);
                    //System.out.println(result);

                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Thêm sản phẩm thành công!");
                        XoaInput();
                    } else {
                        System.out.println("Thêm sản phẩm thất bại!");
                        JOptionPane.showMessageDialog(null, "Thêm sản phẩm thất bại! \n Mã sản phẩm đã tồn tại!"); //Chưa ràng buộc tên tài khoản
                        txfMaSanPham.requestFocus();
                    }
                    LoadAllSanPhamToJTable();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng nhấn Clean trước khi thêm!");
        }

        System.out.println("Đường dẫn ảnh là: => " + ImgPath); //test
    } //Thêm nhân viên

    private void btnChonAnh() {
        JFileChooser file = new JFileChooser(); //Khởi tạo JFileChooser
        file.setCurrentDirectory(new File(System.getProperty("user.home"))); //set thư mục mở lên khi nhấn nút chọn ảnh

        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png", "jpeg");
        file.addChoosableFileFilter(filter); //Lọc đuôi file được phép upload

        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) { //nếu người dùng bấm save
            File fileDaChon = file.getSelectedFile(); //Lấy file đã chọn
            String path = fileDaChon.getAbsolutePath(); //Lấy đường dẫn ảnh
            lblImageSP.setIcon(showImageToJLabel(path, null)); //Hiển thị ảnh lên lblNhanVienImage
            ImgPath = path; //Gán đường dẫn vào ImgPath
        } else {
            System.out.println("Chưa chọn file nào!");
        }

    } //Dùng cho button Chọn ảnh và set ImgPath

    private void KhoaSP() {
        SanPham_DTO SP_DTO = new SanPham_DTO();

        if (tblSanPham.getSelectedRow() != -1 && txfMaSanPham.getText().isEmpty() == false) {
            SP_DTO.setMaSP(Integer.parseInt(txfMaSanPham.getText()));

            SanPham_BUS SP_BUS = new SanPham_BUS();

            int luaChon = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa sản phẩm này không?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (luaChon == JOptionPane.YES_OPTION) {
                try {
                    int result = SP_BUS.KhoaSP(SP_DTO);

                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Xóa sản phẩm thành công!");
                        XoaInput();
                    } else {
                        JOptionPane.showMessageDialog(null, "Xóa sản phẩm thất bại!");
                    }

                    LoadAllSanPhamToJTable();

                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn xóa!");
        }

    }

    private void CapNhatSP() {
        SanPham_DTO SP_DTO = new SanPham_DTO();
        System.out.println(tblSanPham.getSelectedRow());//Test

        if (tblSanPham.getSelectedRow() == -1 || txfMaSanPham.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn sửa!");
        } else if (txfMaSanPham.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập mã sản phẩm!");
            txfMaSanPham.requestFocus();
        } else if (txfTenSanPham.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập tên sản phẩm!");
            txfTenSanPham.requestFocus();
        } else if (txfMieuTaSanPham.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập miêu tả sản phẩm!");
            txfMieuTaSanPham.requestFocus();
        } else if (txfDonGia.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập giá của sản phẩm!");
            txfDonGia.requestFocus();
        } else {
           int maSP = Integer.parseInt(txfMaSanPham.getText());
           SP_DTO.setMaSP(maSP);
            //int cbbMaCV = Integer.parseInt((String) cbbMaChucVu.getSelectedItem());
            int cbxmaNCC = Integer.parseInt((String) cbxNhaCC.getSelectedItem());
                SP_DTO.setMaNCC(cbxmaNCC);
                int cbxmaDM = Integer.parseInt((String) cbxDanhMuc.getSelectedItem());
                SP_DTO.setMaDM(cbxmaDM);
                SP_DTO.setTenSP(txfTenSanPham.getText());
                int cbxSizeSP = Integer.parseInt((String) cbbSizeSP.getSelectedItem());
                SP_DTO.setSizeSP(cbxSizeSP);
                
                SP_DTO.setMieuTaSP(txfMieuTaSanPham.getText());
                SP_DTO.setDonGiaSP(Integer.parseInt(txfDonGia.getText()));
            //Set ảnh trong hàm Thêm ở DAO
            
            SanPham_BUS SP_BUS = new SanPham_BUS();

            try {
                int result = SP_BUS.CapNhatSP(SP_DTO);
                //System.out.println("ket qua: " + result);

                if (result != 0) {
                    JOptionPane.showMessageDialog(null, "Cập nhật sản phẩm thành công!");
                } else {
                    JOptionPane.showMessageDialog(null, "Cập nhật sản phẩm thất bại!");
                }

                LoadAllSanPhamToJTable();

            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }
        System.out.println("Đường dẫn ảnh là: => " + ImgPath); //test
    }
    private void addTimKiemCBB(){
        cbbTimKiem.addItem("Mã sản phẩm");
        cbbTimKiem.addItem("Mã nhà cung cấp");
        cbbTimKiem.addItem("Mã danh mục");
        cbbTimKiem.addItem("Tên sản phẩm");
        cbbTimKiem.addItem("Size sản phẩm");
        cbbTimKiem.addItem("Miêu tả sản phẩm");
        cbbTimKiem.addItem("Giá sản phẩm");
    }
    
    private void TimKiemSP(){
        String optionTimKiem= (String) cbbTimKiem.getSelectedItem();
        System.out.println("Đã chọn: "+ optionTimKiem);//Test
        
        switch (optionTimKiem){
           case "Mã sản phẩm": {               
                String sqlTimKiem = "maSP";
                TimKiem(sqlTimKiem, txfTimKiem.getText());
                break;
           }
           case "Mã nhà cung cấp": {               
                String sqlTimKiem = "maNCC";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Mã danh mục": {               
                String sqlTimKiem = "maDM";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Tên sản phẩm": {               
                String sqlTimKiem = "tenSP";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Size sản phẩm": {               
                String sqlTimKiem = "sizeSP";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Miêu tả sản phẩm": {               
                String sqlTimKiem = "mieuTaSP";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Giá sản phẩm": {               
                String sqlTimKiem = "donGiaSP";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }   
       }
    }
    private void TimKiem(String sqlTimKiem, String valueSearch){
       SanPham_BUS SP_BUS = new SanPham_BUS();
        
        ArrayList<SanPham_DTO> SP_DAO = SP_BUS.timKiemSP(sqlTimKiem, valueSearch);
        DefaultTableModel modelNV = (DefaultTableModel)tblSanPham.getModel();
        modelNV.setRowCount(0);
        
        SanPham_DTO SP_DTO = new SanPham_DTO();
        
        for (int i=0; i < SP_DAO.size(); i++ ){
                SP_DTO = SP_DAO.get(i);
                
                int maSP = SP_DTO.getMaSP();
                int maNCC = SP_DTO.getMaNCC();
                int maDM = SP_DTO.getMaNCC();
                String tenSP = SP_DTO.getTenSP();
                int sizeSP = SP_DTO.getSizeSP();
                int soLuongSP = SP_DTO.getSoLuongSP();
                String mieuTaSP = SP_DTO.getMieuTaSP();
                int donGiaSP = SP_DTO.getDonGiaSP();
                String donGiaSPStr = String.format("%,d", donGiaSP);
                byte [] anhSP = SP_DTO.getAnhSP();
                if (SP_DTO.getTrangThaiSP().equals("Mở")){
                    Object[] row = {maSP, maNCC, maDM, tenSP, sizeSP, soLuongSP, mieuTaSP, donGiaSPStr, anhSP};
                    modelNV.addRow(row);
                }
        }   
    }
    private void locTheoMaSP(){
        SanPham_BUS sanphamBUS = new SanPham_BUS();
        ArrayList<SanPham_DTO> sanphamArr = new ArrayList<SanPham_DTO>();
                
        //Tìm kiếm kết hợp start
        String getCBB = cbbTimKiem.getSelectedItem().toString();
        System.out.println(getCBB); //test
        if (txfTimKiem.getText().isEmpty() == false){
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == false)){
                switch (getCBB){
                    case "Mã sản phẩm": {
                        String valueCBB = "maSP";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhà cung cấp": {
                        String valueCBB = "maNCC";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã danh muc": {
                        String valueCBB = "maDM";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên sản phẩm": {
                        String valueCBB = "tenSP";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Size sản phẩm": {
                        String valueCBB = "sizeSP";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Miêu tả sản phẩm": {
                        String valueCBB = "mieuTaSP";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Giá sản phẩm": {
                        String valueCBB = "donGiaSP";
                        sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc bé hơn kết hợp start
            if ((txfMa1.getText().isEmpty() == true) && (txfMa2.getText().isEmpty() == false)){
                switch (getCBB){
                    case "Mã sản phẩm": {
                        String valueCBB = "maSP";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhà cung cấp": {
                        String valueCBB = "maNCC";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã danh muc": {
                        String valueCBB = "maDM";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên sản phẩm": {
                        String valueCBB = "tenSP";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Size sản phẩm": {
                        String valueCBB = "sizeSP";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Miêu tả sản phẩm": {
                        String valueCBB = "mieuTaSP";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Giá sản phẩm": {
                        String valueCBB = "donGiaSP";
                        sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc bé hơn kết hợp end
            //Lọc lớn hơn kết hợp start
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == true)){
                switch (getCBB){
                    case "Mã sản phẩm": {
                        String valueCBB = "maSP";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhà cung cấp": {
                        String valueCBB = "maNCC";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã danh muc": {
                        String valueCBB = "maDM";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên sản phẩm": {
                        String valueCBB = "tenSP";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Size sản phẩm": {
                        String valueCBB = "sizeSP";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Miêu tả sản phẩm": {
                        String valueCBB = "mieuTaSP";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Giá sản phẩm": {
                        String valueCBB = "donGiaSP";
                        sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc lớn hơn kết hợp end
        }else{
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == false)){
                 sanphamArr = sanphamBUS.locTheoMaSP(txfMa1.getText(), txfMa2.getText());
            }
            if ((txfMa1.getText().isEmpty() == true) && (txfMa2.getText().isEmpty() == false)){
                 sanphamArr = sanphamBUS.locBeHonBang(txfMa2.getText());
            }
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == true)){
                 sanphamArr = sanphamBUS.locLonHonBang(txfMa1.getText());
            }
        }
        //Tìm kiếm kết hợp end
        
         
        DefaultTableModel modelNV = (DefaultTableModel)tblSanPham.getModel();
        modelNV.setRowCount(0);
        
        SanPham_DTO SP_DTO = new SanPham_DTO();
        
        for (int i=0; i < sanphamArr.size(); i++ ){
               SP_DTO = sanphamArr.get(i);
                
                int maSP = SP_DTO.getMaSP();
                int maNCC = SP_DTO.getMaNCC();
                int maDM = SP_DTO.getMaNCC();
                String tenSP = SP_DTO.getTenSP();
                int sizeSP = SP_DTO.getSizeSP();
                int soLuongSP = SP_DTO.getSoLuongSP();
                String mieuTaSP = SP_DTO.getMieuTaSP();
                int donGiaSP = SP_DTO.getDonGiaSP();
                String donGiaSPStr = String.format("%,d", donGiaSP);
                byte [] anhSP = SP_DTO.getAnhSP();
                if (SP_DTO.getTrangThaiSP().equals("Mở")){
                    Object[] row = {maSP, maNCC, maDM, tenSP, sizeSP, soLuongSP, mieuTaSP, donGiaSPStr, anhSP};
                    modelNV.addRow(row);
                }
        }
    }
    private void ExportExcel(){
        JFileChooser file = new JFileChooser(); //Khởi tạo JFileChooser
        file.setCurrentDirectory(new File(System.getProperty("user.home"))); 
        
        int result = file.showSaveDialog(null);
        if ( result == JFileChooser.APPROVE_OPTION){
            XSSFWorkbook excelWorkbook = new XSSFWorkbook();
            XSSFSheet excelSheet = excelWorkbook.createSheet("Danh sách sản phẩm");
            
            XSSFRow row = null;
            Cell cell = null;
            
            row = excelSheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH SẢN PHẨM");

            row = excelSheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Mã sản phẩm");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Mã nhà cung cấp");
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Mã danh mục");
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Tên sản phẩm");
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Size sản phẩm");
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Số lượng sản phẩm");
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Miêu tả sản phẩm");
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Đơn giá sản phẩm");
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Ảnh sản phẩm");
            
            for (int i = 0; i < tblSanPham.getRowCount(); i++){
                row = excelSheet.createRow((short) 4 + i);
                row.setHeight((short) 400);
                for (int j = 0; j < tblSanPham.getColumnCount(); j++){
                    row.createCell(j).setCellValue(tblSanPham.getValueAt(i, j).toString());
                }
            }
            
            FileOutputStream excelFOS;
            BufferedOutputStream excelBOS;
            try{
                excelFOS = new FileOutputStream(new File(file.getSelectedFile() + ".xls"));
                excelBOS = new BufferedOutputStream(excelFOS);
                excelWorkbook.write(excelBOS);
                JOptionPane.showMessageDialog(null, "Xuất file excel thành công!");
                excelBOS.close();
                excelWorkbook.close();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnChonAnh;
    private javax.swing.JButton btnExcelExport;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaInput;
    private javax.swing.JComboBox<String> cbbSizeSP;
    private javax.swing.JComboBox cbbTimKiem;
    private javax.swing.JComboBox<String> cbxDanhMuc;
    private javax.swing.JComboBox<String> cbxNhaCC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbLocTheoMa;
    private javax.swing.JLabel lbMaSanPham;
    private javax.swing.JLabel lbTimKiem;
    private javax.swing.JLabel lblAnhSanPham;
    private javax.swing.JLabel lblDonGia;
    private javax.swing.JLabel lblImageSP;
    private javax.swing.JLabel lblLoaiSanPham;
    private javax.swing.JLabel lblLoaiSanPham1;
    private javax.swing.JLabel lblMieuTaSanPham;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTenSanPham;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txfDonGia;
    private javax.swing.JTextField txfMa1;
    private javax.swing.JTextField txfMa2;
    private javax.swing.JTextField txfMaDanhMuc;
    private javax.swing.JTextField txfMaNhaCungCap;
    private javax.swing.JTextField txfMaSanPham;
    private javax.swing.JTextArea txfMieuTaSanPham;
    private javax.swing.JTextField txfTenSanPham;
    private javax.swing.JTextField txfTimKiem;
    // End of variables declaration//GEN-END:variables

}
