/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import BUS.CongCu;
import BUS.NhanVien_BUS;
import DTO.ChucVu_DTO;
import DTO.NhanVien_DTO;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Administrator
 */
public class QuanLyNhanVien_GUI extends javax.swing.JPanel {
    public static String ImgPath = null;
       
    NhanVien_BUS nhanvienBUS = new NhanVien_BUS();
    /**
     * Creates new form pnQuanLyNguoiDung
     */
    public QuanLyNhanVien_GUI() {
        initComponents();
        
        LoadAllNhanVienToJTable();
        nhanvienBUS.getAllChucVuCBB(cbbMaChucVu);
        addTimKiemCBB();
        addGioiTinhCBB();
        showTenCV();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbQuanLyNhanVien = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbMaNV = new javax.swing.JLabel();
        lbMaChucVu = new javax.swing.JLabel();
        txfTenTaiKhoan = new javax.swing.JTextField();
        lbTenTaiKhoan = new javax.swing.JLabel();
        lbHoTen = new javax.swing.JLabel();
        txfHoTen = new javax.swing.JTextField();
        txfDiaChi = new javax.swing.JTextField();
        lbDiaChi = new javax.swing.JLabel();
        txfSDT = new javax.swing.JTextField();
        lbSDT = new javax.swing.JLabel();
        lbCMND = new javax.swing.JLabel();
        txfCMND = new javax.swing.JTextField();
        lbGioiTinh = new javax.swing.JLabel();
        txfMaNV = new javax.swing.JTextField();
        lbNhanVienImage = new javax.swing.JLabel();
        lbAnhNhanVienText = new javax.swing.JLabel();
        lbMatKhau = new javax.swing.JLabel();
        btnXoaInput = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnKhoa = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        txfTimKiem = new javax.swing.JTextField();
        cbbMaChucVu = new javax.swing.JComboBox<>();
        txfMatKhau = new javax.swing.JTextField();
        txfTenChucVu = new javax.swing.JTextField();
        btnChonAnh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        btnThem = new javax.swing.JButton();
        cbbTimKiem = new javax.swing.JComboBox();
        lbTimKiem = new javax.swing.JLabel();
        btnExcelExport = new javax.swing.JButton();
        cbbGioiTinh = new javax.swing.JComboBox<>();
        lbLocTheoMa = new javax.swing.JLabel();
        txfMa2 = new javax.swing.JTextField();
        txfMa1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));

        lbQuanLyNhanVien.setBackground(new java.awt.Color(102, 102, 255));
        lbQuanLyNhanVien.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        lbQuanLyNhanVien.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-change-user-30.png"))); // NOI18N
        lbQuanLyNhanVien.setText("QUẢN LÝ NHÂN VIÊN");
        lbQuanLyNhanVien.setToolTipText("");

        lbMaNV.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbMaNV.setText("Mã nhân viên:");

        lbMaChucVu.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbMaChucVu.setText("Mã chức vụ:");

        txfTenTaiKhoan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfTenTaiKhoanKeyPressed(evt);
            }
        });

        lbTenTaiKhoan.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbTenTaiKhoan.setText("Tên tài khoản:");

        lbHoTen.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbHoTen.setText("Họ tên:");

        txfHoTen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfHoTenKeyPressed(evt);
            }
        });

        txfDiaChi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfDiaChiKeyPressed(evt);
            }
        });

        lbDiaChi.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbDiaChi.setText("Địa chỉ:");

        txfSDT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfSDTKeyPressed(evt);
            }
        });

        lbSDT.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbSDT.setText("SDT:");

        lbCMND.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbCMND.setText("CMND:");

        txfCMND.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfCMNDKeyPressed(evt);
            }
        });

        lbGioiTinh.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbGioiTinh.setText("Giới tính:");

        txfMaNV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfMaNVKeyPressed(evt);
            }
        });

        lbNhanVienImage.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbNhanVienImage.setText("                     Hình ảnh ở đây");
        lbNhanVienImage.setOpaque(true);
        lbNhanVienImage.setVerifyInputWhenFocusTarget(false);

        lbAnhNhanVienText.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbAnhNhanVienText.setText("Ảnh nhân viên:");

        lbMatKhau.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lbMatKhau.setText("Mật khẩu:");

        btnXoaInput.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnXoaInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clean-icon3.png"))); // NOI18N
        btnXoaInput.setPreferredSize(new java.awt.Dimension(104, 27));
        btnXoaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaInputActionPerformed(evt);
            }
        });

        btnCapNhat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-update-left-rotation-27.png"))); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });

        btnKhoa.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnKhoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-delete-27.png"))); // NOI18N
        btnKhoa.setText("Xóa");
        btnKhoa.setPreferredSize(new java.awt.Dimension(104, 27));
        btnKhoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKhoaActionPerformed(evt);
            }
        });

        txfTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfTimKiemKeyReleased(evt);
            }
        });

        cbbMaChucVu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbMaChucVuActionPerformed(evt);
            }
        });
        cbbMaChucVu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbbMaChucVuKeyPressed(evt);
            }
        });

        txfMatKhau.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfMatKhauKeyPressed(evt);
            }
        });

        txfTenChucVu.setEditable(false);
        txfTenChucVu.setEnabled(false);

        btnChonAnh.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnChonAnh.setText("Chọn ảnh");
        btnChonAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonAnhActionPerformed(evt);
            }
        });

        tblNhanVien.setAutoCreateRowSorter(true);
        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Mã chức vụ", "Tên tài khoản", "Mật khẩu", "Họ tên", "Địa chỉ", "SDT", "CMND", "Giới tính", "Ảnh"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        tblNhanVien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblNhanVienKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblNhanVien);
        if (tblNhanVien.getColumnModel().getColumnCount() > 0) {
            tblNhanVien.getColumnModel().getColumn(0).setMaxWidth(110);
            tblNhanVien.getColumnModel().getColumn(1).setMaxWidth(90);
            tblNhanVien.getColumnModel().getColumn(2).setMaxWidth(120);
            tblNhanVien.getColumnModel().getColumn(3).setMaxWidth(120);
            tblNhanVien.getColumnModel().getColumn(4).setMaxWidth(300);
            tblNhanVien.getColumnModel().getColumn(5).setMaxWidth(200);
            tblNhanVien.getColumnModel().getColumn(6).setMaxWidth(150);
            tblNhanVien.getColumnModel().getColumn(7).setMaxWidth(150);
            tblNhanVien.getColumnModel().getColumn(8).setMaxWidth(90);
            tblNhanVien.getColumnModel().getColumn(9).setMaxWidth(90);
        }

        btnThem.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-add-27.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setPreferredSize(new java.awt.Dimension(104, 27));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        cbbTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTimKiemActionPerformed(evt);
            }
        });

        lbTimKiem.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbTimKiem.setText("Tìm kiếm:");

        btnExcelExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExcelExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-export-excel-27.png"))); // NOI18N
        btnExcelExport.setText("Xuất Excel");
        btnExcelExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelExportActionPerformed(evt);
            }
        });

        cbbGioiTinh.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbbGioiTinh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbbGioiTinhKeyPressed(evt);
            }
        });

        lbLocTheoMa.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbLocTheoMa.setText("Lọc theo mã:");

        txfMa2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfMa2KeyReleased(evt);
            }
        });

        txfMa1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfMa1KeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Tới");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Từ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTenTaiKhoan)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lbMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbMaChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txfTenTaiKhoan)
                                    .addComponent(txfMatKhau)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cbbMaChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txfTenChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txfMaNV)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbSDT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbDiaChi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbCMND, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbGioiTinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(6, 6, 6))
                                    .addComponent(lbHoTen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbMatKhau, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txfCMND, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfSDT, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txfDiaChi, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txfHoTen)
                                    .addComponent(cbbGioiTinh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnChonAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(181, 181, 181))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbAnhNhanVienText, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(175, 175, 175))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbNhanVienImage, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(103, 103, 103))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btnXoaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(62, 62, 62)
                                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCapNhat)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 6, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbLocTheoMa)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbTimKiem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txfMa1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfMa2))
                            .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbbTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnExcelExport, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbAnhNhanVienText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbMaChucVu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbMaChucVu)
                            .addComponent(txfTenChucVu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbTenTaiKhoan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfTenTaiKhoan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfCMND, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCMND, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbNhanVienImage, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChonAnh, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnXoaInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCapNhat)
                        .addComponent(btnKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbbGioiTinh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btnExcelExport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTimKiem)
                            .addComponent(cbbTimKiem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfMa2)
                            .addComponent(lbLocTheoMa)
                            .addComponent(txfMa1)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbQuanLyNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(331, 331, 331))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbQuanLyNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnXoaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaInputActionPerformed
        XoaInput();
    }//GEN-LAST:event_btnXoaInputActionPerformed

    private void cbbMaChucVuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbMaChucVuActionPerformed
        showTenCV();
    }//GEN-LAST:event_cbbMaChucVuActionPerformed

    private void txfMaNVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMaNVKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            cbbMaChucVu.requestFocus();
        }
    }//GEN-LAST:event_txfMaNVKeyPressed

    private void cbbMaChucVuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbbMaChucVuKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfTenTaiKhoan);
        }
    }//GEN-LAST:event_cbbMaChucVuKeyPressed

    private void txfTenTaiKhoanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfTenTaiKhoanKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfMatKhau);
        }
    }//GEN-LAST:event_txfTenTaiKhoanKeyPressed

    private void txfMatKhauKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMatKhauKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfHoTen);
        }
    }//GEN-LAST:event_txfMatKhauKeyPressed

    private void txfHoTenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfHoTenKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfDiaChi);
        }
    }//GEN-LAST:event_txfHoTenKeyPressed

    private void txfDiaChiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfDiaChiKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfSDT);
        }
    }//GEN-LAST:event_txfDiaChiKeyPressed

    private void txfCMNDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCMNDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            cbbGioiTinh.requestFocus();
        }
    }//GEN-LAST:event_txfCMNDKeyPressed

    private void txfSDTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSDTKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            focusInput(txfCMND);
        }
    }//GEN-LAST:event_txfSDTKeyPressed

    private void btnChonAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonAnhActionPerformed
        btnChonAnh();
    }//GEN-LAST:event_btnChonAnhActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        showRowClicked();
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        ThemNV();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnKhoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKhoaActionPerformed
        KhoaNV();
    }//GEN-LAST:event_btnKhoaActionPerformed

    private void tblNhanVienKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNhanVienKeyReleased
        showRowClicked(); 
    }//GEN-LAST:event_tblNhanVienKeyReleased

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        CapNhatNV();
    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void txfTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfTimKiemKeyReleased
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaNV();
        }
    }//GEN-LAST:event_txfTimKiemKeyReleased

    private void cbbTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTimKiemActionPerformed
        
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaNV();
        }
    }//GEN-LAST:event_cbbTimKiemActionPerformed

    private void btnExcelExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelExportActionPerformed
        ExportExcel();
    }//GEN-LAST:event_btnExcelExportActionPerformed

    private void cbbGioiTinhKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbbGioiTinhKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            JOptionPane.showMessageDialog(null, "Vui lòng chọn yêu cầu!");
        }
    }//GEN-LAST:event_cbbGioiTinhKeyPressed

    private void txfMa2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMa2KeyReleased
        if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaNV();
        }
      
    }//GEN-LAST:event_txfMa2KeyReleased

    private void txfMa1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfMa1KeyReleased
       if (txfMa1.getText().isEmpty() == true | txfMa2.getText().isEmpty() == true){
            TimKiemNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == true && txfMa2.getText().isEmpty() == false){
            locTheoMaNV();
        }
       
       if (txfMa1.getText().isEmpty() == false && txfMa2.getText().isEmpty() == true){
            locTheoMaNV();
        }
       
    }//GEN-LAST:event_txfMa1KeyReleased
    
    private void ExportExcel(){
        JFileChooser file = new JFileChooser(); //Khởi tạo JFileChooser
        file.setCurrentDirectory(new File(System.getProperty("user.home"))); 
        
        int result = file.showSaveDialog(null);
        if ( result == JFileChooser.APPROVE_OPTION){
            XSSFWorkbook excelWorkbook = new XSSFWorkbook();
            XSSFSheet excelSheet = excelWorkbook.createSheet("Danh sách nhân viên");
            
            XSSFRow row = null;
            Cell cell = null;
            
            row = excelSheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH NHÂN VIÊN");

            row = excelSheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Mã nhân viên");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Mã chức vụ");
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Tên tài khoản");
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Mật khẩu");
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Họ tên");
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Địa chỉ");
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("SDT");
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("CMND");
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Giới tính");
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Ảnh");
            
            for (int i = 0; i < tblNhanVien.getRowCount(); i++){
                row = excelSheet.createRow((short) 4 + i);
                row.setHeight((short) 400);
                for (int j = 0; j < tblNhanVien.getColumnCount(); j++){
                    row.createCell(j).setCellValue(tblNhanVien.getValueAt(i, j).toString());
                }
            }
            
            FileOutputStream excelFOS;
            BufferedOutputStream excelBOS;
            try{
                excelFOS = new FileOutputStream(new File(file.getSelectedFile() + ".xls"));
                excelBOS = new BufferedOutputStream(excelFOS);
                excelWorkbook.write(excelBOS);
                JOptionPane.showMessageDialog(null, "Xuất file excel thành công!");
                excelBOS.close();
                excelWorkbook.close();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    
    private void LoadAllNhanVienToJTable(){
        ArrayList<NhanVien_DTO> nhanvienArr = new ArrayList<NhanVien_DTO>();
        DefaultTableModel modelNV = (DefaultTableModel)tblNhanVien.getModel();
        modelNV.setRowCount(0); //Xóa dữ liệu đang có trong jtable
        
        NhanVien_BUS nhanvienBUS = new NhanVien_BUS();
        
        try {
            nhanvienArr = nhanvienBUS.getAllNhanVien();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(QuanLyNhanVien_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        
        for (int i=0; i < nhanvienArr.size(); i++ ){
                nhanvienDTO = nhanvienArr.get(i);
            
                int maNV = nhanvienDTO.getMaNV();
                int maChucVu = nhanvienDTO.getMaChucVu();
                String tenTaiKhoanNV = nhanvienDTO.getTenTaiKhoanNV();
                String matKhauNV = nhanvienDTO.getMatKhauNV();
                String hoTenNV = nhanvienDTO.getHoTenNV();
                String diaChiNV = nhanvienDTO.getDiaChiNV();
                String sdtNV = nhanvienDTO.getSdtNV();
                String cmndNV = nhanvienDTO.getCmndNV();
                String gioiTinhNV = nhanvienDTO.getGioiTinhNV();
                byte[] anhNV = nhanvienDTO.getAnhNV();
                
                if ( nhanvienDTO.getTrangThaiNV().equals("Mở") ){
                    Object[] row = {maNV, maChucVu, tenTaiKhoanNV, matKhauNV, hoTenNV, diaChiNV, sdtNV, cmndNV, gioiTinhNV, anhNV};
                    modelNV.addRow(row);
                }

        }
          
    } //Load tất cả nhân viên từ database lên JTable
    
    private void showRowClicked(){
//       ArrayList<NhanVien_DTO> nhanvienArr = new ArrayList<NhanVien_DTO>();
//       NhanVien_BUS nhanvienBUS = new NhanVien_BUS();
       int viTri = tblNhanVien.getSelectedRow();
       
       txfMaNV.setEnabled(false);
       txfMaNV.setDisabledTextColor(Color.GRAY);
       
//        try {
//            nhanvienArr = nhanvienBUS.getAllNhanVien();
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(QuanLyNhanVien_GUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
       
//       if (nhanvienArr.get(viTri).getTrangThaiNV().equals("Mở") ){ 
        if (viTri != -1){
            txfMaNV.setText(tblNhanVien.getValueAt(viTri, 0).toString());   
            cbbMaChucVu.setSelectedItem(tblNhanVien.getValueAt(viTri, 1).toString());
            txfTenTaiKhoan.setText(tblNhanVien.getValueAt(viTri, 2).toString());
            txfMatKhau.setText(tblNhanVien.getValueAt(viTri, 3).toString());
            txfHoTen.setText(tblNhanVien.getValueAt(viTri, 4).toString());
            txfDiaChi.setText(tblNhanVien.getValueAt(viTri, 5).toString());
            txfSDT.setText(tblNhanVien.getValueAt(viTri, 6).toString());
            txfCMND.setText(tblNhanVien.getValueAt(viTri, 7).toString());
            cbbGioiTinh.setSelectedItem(tblNhanVien.getValueAt(viTri, 8).toString());

            lbNhanVienImage.setIcon(this.showImageToJLabel(null, (byte[])tblNhanVien.getValueAt(viTri, 9)));
        }
//       }
    } //Show thông tin nhân viên được click lên Input
    
    private void ThemNV(){
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        int getMaNV;
        
        if (txfMaNV.getDisabledTextColor() != Color.GRAY){
            
            if (txfMaNV.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mã nhân viên!");
                txfMaNV.requestFocus();
            }
            else if (txfTenTaiKhoan.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên tài khoản!");
                txfTenTaiKhoan.requestFocus();
            }
            else if (txfMatKhau.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mật khẩu!");
                txfMatKhau.requestFocus();
            }
            else if (txfHoTen.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập họ tên!");
                txfHoTen.requestFocus();
            }
            else if (txfDiaChi.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập địa chỉ!");
                txfDiaChi.requestFocus();
            }
            else if (txfSDT.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập SDT !");
                txfSDT.requestFocus();
            }
            else if (txfCMND.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập CMND !");
                txfCMND.requestFocus();
            }
            else if ( ImgPath == null ){
                JOptionPane.showMessageDialog(null, "Vui lòng chọn ảnh!");
                btnChonAnh.requestFocus();
            }else{

                if (CongCu.checkTenTK(txfTenTaiKhoan.getText())){
                    if (CongCu.checkSDT(txfSDT.getText())){
                        if (CongCu.checkCMND(txfCMND.getText())){
                            if (CongCu.checkTen(txfHoTen.getText())){
                                if (CongCu.checkDiaChi(txfDiaChi.getText())){
                                    if (CongCu.checkMa(txfMaNV.getText())){
                                        

                                        getMaNV = Integer.parseInt(txfMaNV.getText());
                                        nhanvienDTO.setMaNV(getMaNV);
                                        int cbbMaCV = Integer.parseInt((String) cbbMaChucVu.getSelectedItem());
                                        nhanvienDTO.setMaChucVu(cbbMaCV);
                                        nhanvienDTO.setTenTaiKhoanNV(txfTenTaiKhoan.getText());
                                        nhanvienDTO.setMatKhauNV(txfMatKhau.getText());
                                        nhanvienDTO.setHoTenNV(txfHoTen.getText());
                                        nhanvienDTO.setDiaChiNV(txfDiaChi.getText());
                                        nhanvienDTO.setSdtNV(txfSDT.getText());
                                        nhanvienDTO.setCmndNV(txfCMND.getText());
                                        nhanvienDTO.setGioiTinhNV((String)cbbGioiTinh.getSelectedItem());

                                        NhanVien_BUS nhanvienBUS = new NhanVien_BUS();

                                        try {
                                            int result = nhanvienBUS.ThemNhanVien(nhanvienDTO);

                                            if (result != 0) {
                                                JOptionPane.showMessageDialog(null,"Thêm nhân viên thành công!");
                                                XoaInput();
                                            }else {
                                                System.out.println("Thêm nhân viên thất bại!");

                                                txfMaNV.requestFocus();
                                            }
                                            LoadAllNhanVienToJTable();
                                            } catch (Exception ex) {
                                                ex.printStackTrace();
                                            }
                                    }
                                    
                                }
                            }
                         
                        } 
                    }      
                }
                      
                }
        }else JOptionPane.showMessageDialog(null, "Vui lòng nhấn Clean trước khi thêm!");
            
        System.out.println("Đường dẫn ảnh là: => "+ImgPath); //test
    } //Thêm nhân viên
    
    private void XoaInput(){
    
        txfMaNV.setEnabled(true);
        txfMaNV.setDisabledTextColor(Color.WHITE);
        
        if (txfMaNV.getText().isEmpty() == false){
            txfMaNV.setText("");
        }
        cbbMaChucVu.setSelectedItem("1");
        
        if (txfTenTaiKhoan.getText().isEmpty() == false){
            txfTenTaiKhoan.setText("");  
        }
        if (txfMatKhau.getText().isEmpty() == false){
            txfMatKhau.setText("");  
        }
        if (txfHoTen.getText().isEmpty() == false){
            txfHoTen.setText("");  
        }
        if (txfDiaChi.getText().isEmpty() == false){
            txfDiaChi.setText("");  
        }
        if (txfSDT.getText().isEmpty() == false){
            txfSDT.setText("");  
        }
        if (txfCMND.getText().isEmpty() == false){
            txfCMND.setText("");  
        }
        cbbGioiTinh.setSelectedItem("Nam");
        //Clear đường dẫn ảnh và ảnh trên label
        if (ImgPath != null){
            ImgPath = null;  
        }
        
        lbNhanVienImage.setText("Hình ảnh ở đây!");
        lbNhanVienImage.setIcon(null);
        //lbNhanVienImage.setBackground(new Color(204,255,204));
        
    } //Dùng cho clean button
    
    private void showTenCV(){
       ArrayList<ChucVu_DTO> chucvuArr = new ArrayList<ChucVu_DTO>();
       NhanVien_BUS nhanvienBUS = new NhanVien_BUS(); 
       chucvuArr = nhanvienBUS.getAllChucVu();
       
       int cbbMaCV = Integer.parseInt(cbbMaChucVu.getSelectedItem().toString());
       
       ChucVu_DTO cvDTO = new ChucVu_DTO();
       
       for (int i = 0; i < chucvuArr.size();i++){
           cvDTO = chucvuArr.get(i);
      
           if (cbbMaCV == cvDTO.getMaChucVu()){
                txfTenChucVu.setText(cvDTO.getTenChucVu());
           }
           
       }
   
   } //Dùng cho combobox chức vụ
    
    private void focusInput(JTextField nameTextField){
        nameTextField.requestFocus();
    } 
   
    private void btnChonAnh(){
        JFileChooser file = new JFileChooser(); //Khởi tạo JFileChooser
        file.setCurrentDirectory(new File(System.getProperty("user.home"))); //set thư mục mở lên khi nhấn nút chọn ảnh
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png", "jpeg");
        file.addChoosableFileFilter(filter); //Lọc đuôi file được phép upload
        
        int result = file.showSaveDialog(null);
        if ( result == JFileChooser.APPROVE_OPTION){ //nếu người dùng bấm save
            File fileDaChon = file.getSelectedFile(); //Lấy file đã chọn
            String path = fileDaChon.getAbsolutePath(); //Lấy đường dẫn ảnh
            lbNhanVienImage.setIcon(showImageToJLabel(path, null)); //Hiển thị ảnh lên lblNhanVienImage
            ImgPath = path; //Gán đường dẫn vào ImgPath
        }
        else{
            System.out.println("Chưa chọn file nào!");
        }
        
    } //Dùng cho button Chọn ảnh và set ImgPath
    
    private ImageIcon showImageToJLabel(String ImgPath, byte[] anhNV){
        ImageIcon myImg = null;
        
        if (ImgPath != null){
            myImg = new ImageIcon(ImgPath); //Gán đường dẫn mới (ImgPath) nếu chưa có đường dẫn
        }else{
            myImg = new ImageIcon(anhNV); //Lấy ảnh row được click
        }
        
        Image img = myImg.getImage();
        Image img2 = img.getScaledInstance(lbNhanVienImage.getWidth(), lbNhanVienImage.getHeight(), Image.SCALE_SMOOTH); //Gắn ảnh vào lblNhanVienImage
        
        ImageIcon image = new ImageIcon(img2);
        return image;
    } //Show hình ảnh lên JLabel
    
    private void KhoaNV(){
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        
        if (tblNhanVien.getSelectedRow() != -1  && txfMaNV.getText().isEmpty() == false){
            nhanvienDTO.setMaNV(Integer.parseInt(txfMaNV.getText()));

            NhanVien_BUS nhanvienBUS = new NhanVien_BUS();

            int luaChon = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa nhân viên này không?", "Xác nhận", JOptionPane.YES_NO_OPTION );
            if (luaChon == JOptionPane.YES_OPTION){
               try{
               int result = nhanvienBUS.KhoaNV(nhanvienDTO);

               if (result != 0) {
                    JOptionPane.showMessageDialog(null,"Xóa nhân viên thành công!");
                    XoaInput();
               }else {
                    JOptionPane.showMessageDialog(null,"Xóa nhân viên thất bại!"); 
               }

                LoadAllNhanVienToJTable();

               } catch (Exception ex) {
                    ex.printStackTrace();
               }

            }
        }else JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn xóa!");
        
    }
    
    private void CapNhatNV(){
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        System.out.println(tblNhanVien.getSelectedRow());//Test
        
        if (tblNhanVien.getSelectedRow() == -1 || txfMaNV.getText().equals("")){
               JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng muốn sửa!");
        }
        else if (txfTenTaiKhoan.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập tên tài khoản!");
                txfTenTaiKhoan.requestFocus();
        }
        else if (txfMatKhau.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập mật khẩu!");
                txfMatKhau.requestFocus();
        }
        else if (txfHoTen.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập họ tên!");
                txfHoTen.requestFocus();
        }
        else if (txfDiaChi.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập địa chỉ!");
                txfDiaChi.requestFocus();
        }
        else if (txfSDT.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập SDT !");
                txfSDT.requestFocus();
        }
        else if (txfCMND.getText().isEmpty() == true){
                JOptionPane.showMessageDialog(null, "Vui lòng nhập CMND !");
                txfCMND.requestFocus();
        }else{
            nhanvienDTO.setMaNV(Integer.parseInt(txfMaNV.getText()));
            //int cbbMaCV = Integer.parseInt((String) cbbMaChucVu.getSelectedItem());
            nhanvienDTO.setMaChucVu(Integer.parseInt((String) cbbMaChucVu.getSelectedItem()));
            nhanvienDTO.setTenTaiKhoanNV(txfTenTaiKhoan.getText());
            nhanvienDTO.setMatKhauNV(txfMatKhau.getText());
            nhanvienDTO.setHoTenNV(txfHoTen.getText());
            nhanvienDTO.setDiaChiNV(txfDiaChi.getText());
            nhanvienDTO.setSdtNV(txfSDT.getText());
            nhanvienDTO.setCmndNV(txfCMND.getText());
            nhanvienDTO.setGioiTinhNV((String) cbbGioiTinh.getSelectedItem());
            //Set ảnh trong hàm Thêm ở DAO

            NhanVien_BUS nhanvienBUS = new NhanVien_BUS();

            try{
               int result = nhanvienBUS.CapNhatNV(nhanvienDTO);

               if (result != 0) {
                    JOptionPane.showMessageDialog(null,"Cập nhật nhân viên thành công!");        
               }else {
                    JOptionPane.showMessageDialog(null,"Cập nhật nhân viên thất bại!"); 
               }

                LoadAllNhanVienToJTable();

               } catch (Exception ex) {
                    ex.printStackTrace();
               }
     
        }
   }
    
    private void addTimKiemCBB(){
        cbbTimKiem.addItem("Tên tài khoản NV");
        cbbTimKiem.addItem("Mã nhân viên");
        cbbTimKiem.addItem("Mã chức vụ");
        cbbTimKiem.addItem("Họ tên NV");
        cbbTimKiem.addItem("Địa chỉ NV");
        cbbTimKiem.addItem("SDT NV");
        cbbTimKiem.addItem("CMND NV");
        cbbTimKiem.addItem("Giới tính NV");
    }
    
    private void addGioiTinhCBB(){
        cbbGioiTinh.addItem("Nam");
        cbbGioiTinh.addItem("Nữ");
        cbbGioiTinh.addItem("Khác");
    }
    
    private void TimKiemNV(){
        String optionTimKiem= (String) cbbTimKiem.getSelectedItem();
        System.out.println("Đã chọn: "+ optionTimKiem);//Test
        
        switch (optionTimKiem){
           case "Tên tài khoản NV": {
                String sqlTimKiem = "tenTaiKhoanNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Mã nhân viên": {               
                String sqlTimKiem = "maNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Mã chức vụ": {               
                String sqlTimKiem = "maChucVu";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Họ tên NV": {               
                String sqlTimKiem = "hoTenNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Địa chỉ NV": {               
                String sqlTimKiem = "diaChiNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "SDT NV": {               
                String sqlTimKiem = "sdtNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());        
                break;
           }
           case "CMND NV": {               
                String sqlTimKiem = "cmndNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());           
                break;
           }
           case "Giới tính NV": {               
                String sqlTimKiem = "gioiTinhNV";
                TimKiem(sqlTimKiem, txfTimKiem.getText());
                break;
           }     
       }
    }
   
    private void TimKiem(String sqlTimKiem, String valueSearch){
        NhanVien_BUS nhanvienBUS = new NhanVien_BUS();
        
        ArrayList<NhanVien_DTO> nhanvienArr = nhanvienBUS.timKiemNV(sqlTimKiem, valueSearch);
        DefaultTableModel modelNV = (DefaultTableModel)tblNhanVien.getModel();
        modelNV.setRowCount(0);
        
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        
        for (int i=0; i < nhanvienArr.size(); i++ ){
                nhanvienDTO = nhanvienArr.get(i);
            
                int maNV = nhanvienDTO.getMaNV();
                int maChucVu = nhanvienDTO.getMaChucVu();
                String tenTaiKhoanNV = nhanvienDTO.getTenTaiKhoanNV();
                String matKhauNV = nhanvienDTO.getMatKhauNV();
                String hoTenNV = nhanvienDTO.getHoTenNV();
                String diaChiNV = nhanvienDTO.getDiaChiNV();
                String sdtNV = nhanvienDTO.getSdtNV();
                String cmndNV = nhanvienDTO.getCmndNV();
                String gioiTinhNV = nhanvienDTO.getGioiTinhNV();
                byte[] anhNV = nhanvienDTO.getAnhNV();
                
                if (nhanvienDTO.getTrangThaiNV().equals("Mở")){
                    Object[] row = {maNV, maChucVu, tenTaiKhoanNV, matKhauNV, hoTenNV, diaChiNV, sdtNV, cmndNV, gioiTinhNV, anhNV};
                    modelNV.addRow(row);
                }
        }   
    }
    
    
    private void locTheoMaNV(){
        NhanVien_BUS nhanvienBUS = new NhanVien_BUS();
        ArrayList<NhanVien_DTO> nhanvienArr = new ArrayList<NhanVien_DTO>();
                
        //Tìm kiếm kết hợp start
        String getCBB = cbbTimKiem.getSelectedItem().toString();
        System.out.println(getCBB); //test
        if (txfTimKiem.getText().isEmpty() == false){
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == false)){
                switch (getCBB){
                    case "Giới tính NV": {
                        String valueCBB = "gioiTinhNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhân viên": {
                        String valueCBB = "maNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã chức vụ": {
                        String valueCBB = "maChucVu";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên tài khoản NV": {
                        String valueCBB = "tenTaiKhoanNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "SDT NV": {
                        String valueCBB = "sdtNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "CMND NV": {
                        String valueCBB = "cmndNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Họ tên NV": {
                        String valueCBB = "hoTenNV";
                        nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc bé hơn kết hợp start
            if ((txfMa1.getText().isEmpty() == true) && (txfMa2.getText().isEmpty() == false)){
                switch (getCBB){
                    case "Giới tính NV": {
                        String valueCBB = "gioiTinhNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhân viên": {
                        String valueCBB = "maNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã chức vụ": {
                        String valueCBB = "maChucVu";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên tài khoản NV": {
                        String valueCBB = "tenTaiKhoanNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "SDT NV": {
                        String valueCBB = "sdtNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "CMND NV": {
                        String valueCBB = "cmndNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Họ tên NV": {
                        String valueCBB = "hoTenNV";
                        nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc bé hơn kết hợp end
            //Lọc lớn hơn kết hợp start
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == true)){
                switch (getCBB){
                    case "Giới tính NV": {
                        String valueCBB = "gioiTinhNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã nhân viên": {
                        String valueCBB = "maNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Mã chức vụ": {
                        String valueCBB = "maChucVu";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Tên tài khoản NV": {
                        String valueCBB = "tenTaiKhoanNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "SDT NV": {
                        String valueCBB = "sdtNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "CMND NV": {
                        String valueCBB = "cmndNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                    case "Họ tên NV": {
                        String valueCBB = "hoTenNV";
                        nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText(), valueCBB, txfTimKiem.getText());
                        break;
                    }
                }
            }
            //Lọc lớn hơn kết hợp end
        }else{
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == false)){
                nhanvienArr = nhanvienBUS.locTheoMaNV(txfMa1.getText(), txfMa2.getText());
            }
            if ((txfMa1.getText().isEmpty() == true) && (txfMa2.getText().isEmpty() == false)){
                nhanvienArr = nhanvienBUS.locBeHonBang(txfMa2.getText());
            }
            if ((txfMa1.getText().isEmpty() == false) && (txfMa2.getText().isEmpty() == true)){
                nhanvienArr = nhanvienBUS.locLonHonBang(txfMa1.getText());
            }
        }
        //Tìm kiếm kết hợp end
        
         
        DefaultTableModel modelNV = (DefaultTableModel)tblNhanVien.getModel();
        modelNV.setRowCount(0);
        
        NhanVien_DTO nhanvienDTO = new NhanVien_DTO();
        
        for (int i=0; i < nhanvienArr.size(); i++ ){
                nhanvienDTO = nhanvienArr.get(i);
            
                int maNV = nhanvienDTO.getMaNV();
                int maChucVu = nhanvienDTO.getMaChucVu();
                String tenTaiKhoanNV = nhanvienDTO.getTenTaiKhoanNV();
                String matKhauNV = nhanvienDTO.getMatKhauNV();
                String hoTenNV = nhanvienDTO.getHoTenNV();
                String diaChiNV = nhanvienDTO.getDiaChiNV();
                String sdtNV = nhanvienDTO.getSdtNV();
                String cmndNV = nhanvienDTO.getCmndNV();
                String gioiTinhNV = nhanvienDTO.getGioiTinhNV();
                byte[] anhNV = nhanvienDTO.getAnhNV();
                
                if (nhanvienDTO.getTrangThaiNV().equals("Mở")){
                    Object[] row = {maNV, maChucVu, tenTaiKhoanNV, matKhauNV, hoTenNV, diaChiNV, sdtNV, cmndNV, gioiTinhNV, anhNV};
                    modelNV.addRow(row);
                }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnChonAnh;
    private javax.swing.JButton btnExcelExport;
    private javax.swing.JButton btnKhoa;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoaInput;
    private javax.swing.JComboBox<String> cbbGioiTinh;
    private javax.swing.JComboBox<String> cbbMaChucVu;
    private javax.swing.JComboBox cbbTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbAnhNhanVienText;
    private javax.swing.JLabel lbCMND;
    private javax.swing.JLabel lbDiaChi;
    private javax.swing.JLabel lbGioiTinh;
    private javax.swing.JLabel lbHoTen;
    private javax.swing.JLabel lbLocTheoMa;
    private javax.swing.JLabel lbMaChucVu;
    private javax.swing.JLabel lbMaNV;
    private javax.swing.JLabel lbMatKhau;
    private javax.swing.JLabel lbNhanVienImage;
    private javax.swing.JLabel lbQuanLyNhanVien;
    private javax.swing.JLabel lbSDT;
    private javax.swing.JLabel lbTenTaiKhoan;
    private javax.swing.JLabel lbTimKiem;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txfCMND;
    private javax.swing.JTextField txfDiaChi;
    private javax.swing.JTextField txfHoTen;
    private javax.swing.JTextField txfMa1;
    private javax.swing.JTextField txfMa2;
    private javax.swing.JTextField txfMaNV;
    private javax.swing.JTextField txfMatKhau;
    private javax.swing.JTextField txfSDT;
    private javax.swing.JTextField txfTenChucVu;
    private javax.swing.JTextField txfTenTaiKhoan;
    private javax.swing.JTextField txfTimKiem;
    // End of variables declaration//GEN-END:variables
}
